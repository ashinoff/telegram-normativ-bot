import os
import logging
import asyncio
from typing import List, Dict
from dotenv import load_dotenv
from aiohttp import web
import threading
import aiohttp

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from yandex_cloud_ml_sdk import AsyncYCloudML

# ====================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======================
load_dotenv()

BOT_TOKEN = os.environ.get('BOT_TOKEN')
FOLDER_ID = os.environ.get('FOLDER_ID')
API_KEY = os.environ.get('YANDEX_API_KEY')
MODEL_URI = f"gpt://{FOLDER_ID}/yandexgpt-lite/latest"
TEMPERATURE = 0.3
MAX_TOKENS = 2000

# –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Ä–∞–±–æ—Ç—ã —Å YandexGPT (SDK –∏–ª–∏ HTTP)
USE_SDK = True  # –ü–æ—Å—Ç–∞–≤—å—Ç–µ False, –µ—Å–ª–∏ SDK –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

# ====================== –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ======================
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ httpx, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._application").setLevel(logging.WARNING)

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - —Å–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ª–æ–≥–æ–≤
class TokenFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ª–æ–≥–∞—Ö"""
    def __init__(self, token):
        super().__init__()
        self.token = token
        self.masked_token = token[:6] + "..." + token[-4:] if token else ""
    
    def filter(self, record):
        if self.token and hasattr(record, 'msg'):
            record.msg = str(record.msg).replace(self.token, self.masked_token)
        return True

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º
if BOT_TOKEN:
    token_filter = TokenFilter(BOT_TOKEN)
    for handler in logging.root.handlers:
        handler.addFilter(token_filter)

# –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Telegram
telegram_logger = logging.getLogger('telegram')
telegram_logger.setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏

# ====================== –ü–†–û–°–¢–û–ô –ü–û–ò–°–ö –ë–ï–ó EMBEDDINGS ======================
class SimpleDocumentSearch:
    def __init__(self):
        self.documents = []
        self.load_documents()
        
    def load_documents(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ documents"""
        docs_path = "documents"
        
        if not os.path.exists(docs_path):
            os.makedirs(docs_path)
            logger.warning(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {docs_path}")
            return
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Ü–µ–ª–∏–∫–æ–º
        for filename in os.listdir(docs_path):
            if filename.endswith(('.txt', '.md')):
                try:
                    filepath = os.path.join(docs_path, filename)
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        
                    self.documents.append({
                        'filename': filename,
                        'content': content
                    })
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(self.documents)}")
    
    def search(self, query: str) -> List[Dict]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        if not self.documents:
            return []
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        keywords = query.lower().split()
        
        results = []
        for doc in self.documents:
            content_lower = doc['content'].lower()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            matches = sum(1 for keyword in keywords if keyword in content_lower)
            
            if matches > 0:
                # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                fragments = self.extract_relevant_fragments(doc['content'], keywords)
                if fragments:
                    results.append({
                        'filename': doc['filename'],
                        'content': fragments,
                        'matches': matches
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        results.sort(key=lambda x: x['matches'], reverse=True)
        return results[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3
    
    def extract_relevant_fragments(self, text: str, keywords: List[str], context_size: int = 300) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        sentences = text.split('.')
        relevant_sentences = []
        
        for sentence in sentences:
            sentence_lower = sentence.lower()
            if any(keyword in sentence_lower for keyword in keywords):
                relevant_sentences.append(sentence.strip())
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        result = '. '.join(relevant_sentences[:5])
        if len(result) > 2000:
            result = result[:2000] + '...'
        
        return result

# ====================== YANDEXGPT HELPERS ======================
async def call_yandexgpt_http(messages: List[Dict], temperature: float, max_tokens: int) -> str:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–∑–æ–≤–∞ YandexGPT —á–µ—Ä–µ–∑ HTTP API"""
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á –≤ –ª–æ–≥–∞—Ö
    masked_api_key = API_KEY[:8] + "..." + API_KEY[-4:] if API_KEY else "not_set"
    logger.debug(f"–í—ã–∑–æ–≤ YandexGPT API (–∫–ª—é—á: {masked_api_key})")
    
    headers = {
        "Authorization": f"Api-Key {API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "modelUri": MODEL_URI,
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": max_tokens
        },
        "messages": messages
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data, headers=headers) as response:
            if response.status != 200:
                error_text = await response.text()
                raise Exception(f"YandexGPT API error: {response.status} - {error_text}")
            
            result = await response.json()
            return result["result"]["alternatives"][0]["message"]["text"]

async def call_yandexgpt_sdk(sdk: AsyncYCloudML, messages: List[Dict], temperature: float, max_tokens: int) -> str:
    """–í—ã–∑–æ–≤ YandexGPT —á–µ—Ä–µ–∑ SDK"""
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model = sdk.models.completions(MODEL_URI)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = await model.run(
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens
        )
        
        return result.alternatives[0].text
    except Exception as e:
        logger.error(f"SDK error: {e}")
        # –ï—Å–ª–∏ SDK –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ HTTP
        logger.info("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ HTTP –º–µ—Ç–æ–¥...")
        return await call_yandexgpt_http(messages, temperature, max_tokens)

# ====================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======================
sdk_async = AsyncYCloudML(folder_id=FOLDER_ID, auth=API_KEY) if USE_SDK else None
searcher = SimpleDocumentSearch()

# ====================== HEALTH CHECK SERVER ======================
async def health_check(request):
    """–ü—Ä–æ—Å—Ç–æ–π health check endpoint –¥–ª—è Render"""
    return web.Response(text="Bot is running", status=200)

def run_health_server():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PORT)
    port = int(os.environ.get('PORT', 10000))
    
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º access –ª–æ–≥–∏ aiohttp —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        access_logger = logging.getLogger('aiohttp.access')
        access_logger.setLevel(logging.WARNING)
        
        web.run_app(app, host='0.0.0.0', port=port, print=lambda _: None, access_log=None)
    except Exception as e:
        logger.error(f"Health server error: {e}")

# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======================
async def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    docs_count = len(searcher.documents)
    user_name = update.effective_user.first_name or "–î—Ä—É–≥"
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –ü–ü–†–§ 442.\n\n"
        "üìö –ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ:\n"
        "‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–º—É —É—á–µ—Ç—É —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∑–∞–º–µ–Ω–µ –ø—Ä–∏–±–æ—Ä–æ–≤ —É—á–µ—Ç–∞\n"
        "‚Ä¢ –°—Ä–æ–∫–∞–º –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª—é\n"
        "‚Ä¢ –ë–µ–∑—É—á–µ—Ç–Ω–æ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é\n\n"
        f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {docs_count}\n\n"
        "‚ùì –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –±–µ–∑ –ø–æ–∫–∞–∑–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {update.effective_user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def list_docs(update: Update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if not searcher.documents:
        await update.message.reply_text("üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return
    
    file_list = "\n".join([f"‚Ä¢ {doc['filename']}" for doc in searcher.documents])
    
    await update.message.reply_text(
        f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n{file_list}"
    )

async def reload_docs(update: Update, context):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
    user_id = update.effective_user.id
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    # ADMIN_IDS = [123456789]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    # if user_id not in ADMIN_IDS:
    #     await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    #     return
    
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
    
    searcher.documents = []
    searcher.load_documents()
    
    await update.message.reply_text(
        f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n"
        f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(searcher.documents)} —Ñ–∞–π–ª–æ–≤"
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:{user_id} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã")

async def handle_message(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–∫–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_name} (ID: {user_id}), –¥–ª–∏–Ω–∞: {len(user_message)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action="typing"
    )
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        search_results = searcher.search(user_message)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_text = ""
        sources = []
        
        if search_results:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(search_results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            for result in search_results:
                context_text += f"\n–ò–∑ —Ñ–∞–π–ª–∞ {result['filename']}:\n{result['content']}\n"
                sources.append(result['filename'])
        else:
            logger.info("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è YandexGPT
        system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ ‚Ññ442 (–ü–ü–†–§ 442).
–û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º.
–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã, —É–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ü–ü–†–§.
–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º."""
        
        messages = [{"role": "system", "text": system_prompt}]
        
        if context_text:
            prompt = f"–î–æ–∫—É–º–µ–Ω—Ç—ã:\n{context_text}\n\n–í–æ–ø—Ä–æ—Å –æ—Ç {user_name}: {user_message}"
        else:
            prompt = (f"–í–æ–ø—Ä–æ—Å –æ—Ç {user_name}: {user_message}\n\n"
                     "–í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
                     "–û—Ç–≤–µ—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π –æ –ü–ü–†–§ 442, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.")
        
        messages.append({"role": "user", "text": prompt})
        
        # –í—ã–∑–æ–≤ YandexGPT
        if USE_SDK and sdk_async:
            response_text = await call_yandexgpt_sdk(sdk_async, messages, TEMPERATURE, MAX_TOKENS)
        else:
            response_text = await call_yandexgpt_http(messages, TEMPERATURE, MAX_TOKENS)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if sources:
            response_text += f"\n\nüìé _–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(set(sources))}_"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response_text, parse_mode='Markdown')
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID:{user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ID:{user_id}: {type(e).__name__}: {str(e)}")
        
        error_message = (
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ YandexGPT\n"
            "‚Ä¢ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—á–µ\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É"
        )
        
        await update.message.reply_text(error_message)

# ====================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ======================
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not all([BOT_TOKEN, FOLDER_ID, API_KEY]):
        logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("–¢—Ä–µ–±—É—é—Ç—Å—è: BOT_TOKEN, FOLDER_ID, YANDEX_API_KEY")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    masked_token = BOT_TOKEN[:6] + "..." + BOT_TOKEN[-4:] if BOT_TOKEN else "not_set"
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º: {masked_token}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–¥–ª—è Render)
    if os.environ.get('PORT'):
        health_thread = threading.Thread(target=run_health_server, daemon=True)
        health_thread.start()
        logger.info("üåê Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("docs", list_docs))
    application.add_handler(CommandHandler("reload", reload_docs))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(searcher.documents)}")
    logger.info(f"üîß –ú–µ—Ç–æ–¥ API: {'SDK' if USE_SDK else 'HTTP'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    )

if __name__ == '__main__':
    main()
