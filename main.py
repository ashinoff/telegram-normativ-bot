import os
import logging
import asyncio
from typing import List, Dict
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from yandex_cloud_ml_sdk import AsyncYCloudML

# ====================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======================
load_dotenv()

BOT_TOKEN = os.environ.get('BOT_TOKEN')
FOLDER_ID = os.environ.get('FOLDER_ID')
API_KEY = os.environ.get('YANDEX_API_KEY')
MODEL = "yandexgpt-lite"
TEMPERATURE = 0.3
MAX_TOKENS = 2000

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ====================== –ü–†–û–°–¢–û–ô –ü–û–ò–°–ö –ë–ï–ó EMBEDDINGS ======================
class SimpleDocumentSearch:
    def __init__(self):
        self.documents = []
        self.load_documents()
        
    def load_documents(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ documents"""
        docs_path = "documents"
        
        if not os.path.exists(docs_path):
            os.makedirs(docs_path)
            logger.warning(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {docs_path}")
            return
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Ü–µ–ª–∏–∫–æ–º
        for filename in os.listdir(docs_path):
            if filename.endswith(('.txt', '.md')):
                try:
                    filepath = os.path.join(docs_path, filename)
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        
                    self.documents.append({
                        'filename': filename,
                        'content': content
                    })
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(self.documents)}")
    
    def search(self, query: str) -> List[Dict]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        if not self.documents:
            return []
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        keywords = query.lower().split()
        
        results = []
        for doc in self.documents:
            content_lower = doc['content'].lower()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            matches = sum(1 for keyword in keywords if keyword in content_lower)
            
            if matches > 0:
                # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                fragments = self.extract_relevant_fragments(doc['content'], keywords)
                if fragments:
                    results.append({
                        'filename': doc['filename'],
                        'content': fragments,
                        'matches': matches
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        results.sort(key=lambda x: x['matches'], reverse=True)
        return results[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3
    
    def extract_relevant_fragments(self, text: str, keywords: List[str], context_size: int = 300) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        sentences = text.split('.')
        relevant_sentences = []
        
        for sentence in sentences:
            sentence_lower = sentence.lower()
            if any(keyword in sentence_lower for keyword in keywords):
                relevant_sentences.append(sentence.strip())
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        result = '. '.join(relevant_sentences[:5])
        if len(result) > 2000:
            result = result[:2000] + '...'
        
        return result

# ====================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======================
sdk_async = AsyncYCloudML(folder_id=FOLDER_ID, auth=API_KEY)
searcher = SimpleDocumentSearch()

# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======================
async def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    docs_count = len(searcher.documents)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –ü–ü–†–§ 442.\n\n"
        "üìö –ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ:\n"
        "‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–º—É —É—á–µ—Ç—É —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∑–∞–º–µ–Ω–µ –ø—Ä–∏–±–æ—Ä–æ–≤ —É—á–µ—Ç–∞\n"
        "‚Ä¢ –°—Ä–æ–∫–∞–º –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª—é\n"
        "‚Ä¢ –ë–µ–∑—É—á–µ—Ç–Ω–æ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é\n\n"
        f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {docs_count}\n\n"
        "‚ùì –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
    )

async def list_docs(update: Update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if not searcher.documents:
        await update.message.reply_text("üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return
    
    file_list = "\n".join([f"‚Ä¢ {doc['filename']}" for doc in searcher.documents])
    
    await update.message.reply_text(
        f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n{file_list}"
    )

async def handle_message(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action="typing"
    )
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        search_results = searcher.search(user_message)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_text = ""
        sources = []
        
        if search_results:
            for result in search_results:
                context_text += f"\n–ò–∑ —Ñ–∞–π–ª–∞ {result['filename']}:\n{result['content']}\n"
                sources.append(result['filename'])
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è YandexGPT
        system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ü–ü–†–§ 442. –û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã, —É–∫–∞–∑—ã–≤–∞–π –ø—É–Ω–∫—Ç—ã –ü–ü–†–§."""
        
        messages = [{"role": "system", "text": system_prompt}]
        
        if context_text:
            prompt = f"–î–æ–∫—É–º–µ–Ω—Ç—ã:\n{context_text}\n\n–í–æ–ø—Ä–æ—Å: {user_message}"
        else:
            prompt = f"–í–æ–ø—Ä–æ—Å: {user_message}\n\n–í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ß—Ç–æ –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –∏–∑ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π?"
        
        messages.append({"role": "user", "text": prompt})
        
        # –ó–∞–ø—Ä–æ—Å –∫ YandexGPT
        result = await sdk_async.models.completions(
            model=MODEL,
            messages=messages,
            temperature=TEMPERATURE,
            max_tokens=MAX_TOKENS
        )
        
        response_text = result.alternatives[0].text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if sources:
            response_text += f"\n\nüìé _–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(set(sources))}_"
        
        await update.message.reply_text(response_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        )

# ====================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ======================
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not all([BOT_TOKEN, FOLDER_ID, API_KEY]):
        logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("docs", list_docs))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(searcher.documents)}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
